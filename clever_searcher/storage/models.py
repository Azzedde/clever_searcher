"""SQLAlchemy models for Clever Searcher"""

from datetime import datetime
from typing import Optional, List, Dict, Any
import json

from sqlalchemy import (
    Column, Integer, String, Text, Float, DateTime, Boolean, 
    ForeignKey, Index, UniqueConstraint, JSON
)
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import relationship, Session
from sqlalchemy.sql import func

Base = declarative_base()


class Page(Base):
    """Represents a web page that has been discovered and processed"""
    __tablename__ = "pages"
    
    id = Column(Integer, primary_key=True)
    canonical_url = Column(String(2048), unique=True, nullable=False, index=True)
    original_url = Column(String(2048), nullable=False)
    domain = Column(String(255), nullable=False, index=True)
    title = Column(String(512))
    author = Column(String(255))
    published_at = Column(DateTime)
    content_hash = Column(String(64), nullable=False, index=True)
    content_length = Column(Integer)
    first_seen = Column(DateTime, default=func.now(), nullable=False)
    last_seen = Column(DateTime, default=func.now(), nullable=False)
    last_updated = Column(DateTime, default=func.now(), onupdate=func.now())
    status = Column(String(50), default="active")  # active, archived, deleted
    
    # Relationships
    summaries = relationship("Summary", back_populates="page", cascade="all, delete-orphan")
    topics = relationship("PageTopic", back_populates="page", cascade="all, delete-orphan")
    feedback = relationship("Feedback", back_populates="page", cascade="all, delete-orphan")
    embeddings = relationship("Embedding", back_populates="page", cascade="all, delete-orphan")
    
    # Indexes
    __table_args__ = (
        Index("idx_pages_domain_seen", "domain", "last_seen"),
        Index("idx_pages_hash_status", "content_hash", "status"),
    )
    
    def to_dict(self) -> Dict[str, Any]:
        return {
            "id": self.id,
            "canonical_url": self.canonical_url,
            "domain": self.domain,
            "title": self.title,
            "author": self.author,
            "published_at": self.published_at.isoformat() if self.published_at else None,
            "first_seen": self.first_seen.isoformat(),
            "last_seen": self.last_seen.isoformat(),
            "status": self.status,
        }


class Summary(Base):
    """Structured summary of a page generated by LLM"""
    __tablename__ = "summaries"
    
    id = Column(Integer, primary_key=True)
    page_id = Column(Integer, ForeignKey("pages.id"), nullable=False)
    category = Column(String(100), nullable=False, index=True)
    tldr = Column(Text)
    bullets = Column(JSON)  # List of bullet points
    tags = Column(JSON)     # List of tags
    entities = Column(JSON) # List of extracted entities
    read_time_sec = Column(Integer)
    score = Column(Float, default=0.0, index=True)
    model_used = Column(String(100))
    created_at = Column(DateTime, default=func.now(), nullable=False)
    
    # Relationships
    page = relationship("Page", back_populates="summaries")
    
    # Indexes
    __table_args__ = (
        Index("idx_summaries_category_score", "category", "score"),
        Index("idx_summaries_created", "created_at"),
    )
    
    def to_dict(self) -> Dict[str, Any]:
        return {
            "id": self.id,
            "page_id": self.page_id,
            "category": self.category,
            "tldr": self.tldr,
            "bullets": self.bullets,
            "tags": self.tags,
            "entities": self.entities,
            "read_time_sec": self.read_time_sec,
            "score": self.score,
            "created_at": self.created_at.isoformat(),
        }


class Source(Base):
    """Information about content sources and their characteristics"""
    __tablename__ = "sources"
    
    id = Column(Integer, primary_key=True)
    domain = Column(String(255), unique=True, nullable=False, index=True)
    name = Column(String(255))
    trust_score = Column(Float, default=0.5)
    rss_url = Column(String(1024))
    sitemap_url = Column(String(1024))
    revisit_interval_hours = Column(Integer, default=24)
    last_crawled = Column(DateTime)
    crawl_success_rate = Column(Float, default=1.0)
    avg_content_quality = Column(Float, default=0.5)
    is_active = Column(Boolean, default=True)
    notes = Column(Text)
    created_at = Column(DateTime, default=func.now(), nullable=False)
    updated_at = Column(DateTime, default=func.now(), onupdate=func.now())
    
    def to_dict(self) -> Dict[str, Any]:
        return {
            "id": self.id,
            "domain": self.domain,
            "name": self.name,
            "trust_score": self.trust_score,
            "revisit_interval_hours": self.revisit_interval_hours,
            "last_crawled": self.last_crawled.isoformat() if self.last_crawled else None,
            "is_active": self.is_active,
        }


class PageTopic(Base):
    """Many-to-many relationship between pages and topics"""
    __tablename__ = "page_topics"
    
    id = Column(Integer, primary_key=True)
    page_id = Column(Integer, ForeignKey("pages.id"), nullable=False)
    topic = Column(String(100), nullable=False, index=True)
    confidence = Column(Float, default=1.0)
    created_at = Column(DateTime, default=func.now(), nullable=False)
    
    # Relationships
    page = relationship("Page", back_populates="topics")
    
    # Constraints
    __table_args__ = (
        UniqueConstraint("page_id", "topic", name="uq_page_topic"),
        Index("idx_topic_confidence", "topic", "confidence"),
    )


class Feedback(Base):
    """User feedback on pages for personalization learning"""
    __tablename__ = "feedback"
    
    id = Column(Integer, primary_key=True)
    page_id = Column(Integer, ForeignKey("pages.id"), nullable=False)
    signal = Column(String(50), nullable=False)  # like, dislike, opened, skipped, bookmarked
    value = Column(Float, nullable=False)        # 1.0, -1.0, 0.5, etc.
    context = Column(JSON)                       # Additional context data
    created_at = Column(DateTime, default=func.now(), nullable=False)
    
    # Relationships
    page = relationship("Page", back_populates="feedback")
    
    # Indexes
    __table_args__ = (
        Index("idx_feedback_signal_value", "signal", "value"),
        Index("idx_feedback_created", "created_at"),
    )


class Embedding(Base):
    """Vector embeddings for semantic similarity"""
    __tablename__ = "embeddings"
    
    id = Column(Integer, primary_key=True)
    page_id = Column(Integer, ForeignKey("pages.id"), nullable=False)
    embedding_type = Column(String(50), nullable=False)  # content, title, summary
    model_name = Column(String(100), nullable=False)
    vector_data = Column(JSON, nullable=False)  # Stored as JSON array
    created_at = Column(DateTime, default=func.now(), nullable=False)
    
    # Relationships
    page = relationship("Page", back_populates="embeddings")
    
    # Constraints
    __table_args__ = (
        UniqueConstraint("page_id", "embedding_type", "model_name", name="uq_page_embedding"),
        Index("idx_embedding_type_model", "embedding_type", "model_name"),
    )


class CrawlRun(Base):
    """Information about crawl runs for tracking and analytics"""
    __tablename__ = "crawl_runs"
    
    id = Column(Integer, primary_key=True)
    category = Column(String(100), nullable=False, index=True)
    query = Column(String(512))
    pages_discovered = Column(Integer, default=0)
    pages_processed = Column(Integer, default=0)
    pages_new = Column(Integer, default=0)
    pages_duplicate = Column(Integer, default=0)
    avg_score = Column(Float)
    duration_seconds = Column(Float)
    status = Column(String(50), default="running")  # running, completed, failed
    error_message = Column(Text)
    config = Column(JSON)  # Run configuration
    started_at = Column(DateTime, default=func.now(), nullable=False)
    completed_at = Column(DateTime)
    
    # Indexes
    __table_args__ = (
        Index("idx_crawl_runs_category_started", "category", "started_at"),
        Index("idx_crawl_runs_status", "status"),
    )
    
    def to_dict(self) -> Dict[str, Any]:
        return {
            "id": self.id,
            "category": self.category,
            "query": self.query,
            "pages_discovered": self.pages_discovered,
            "pages_processed": self.pages_processed,
            "pages_new": self.pages_new,
            "status": self.status,
            "started_at": self.started_at.isoformat(),
            "completed_at": self.completed_at.isoformat() if self.completed_at else None,
        }


class UserProfile(Base):
    """User preferences and personalization data"""
    __tablename__ = "user_profiles"
    
    id = Column(Integer, primary_key=True)
    name = Column(String(100), default="default", unique=True, nullable=False)
    interests = Column(JSON)      # List of interest keywords/topics
    preferences = Column(JSON)    # Preference weights and settings
    embedding_data = Column(JSON) # User profile embedding
    feedback_count = Column(Integer, default=0)
    last_updated = Column(DateTime, default=func.now(), onupdate=func.now())
    created_at = Column(DateTime, default=func.now(), nullable=False)
    
    def to_dict(self) -> Dict[str, Any]:
        return {
            "id": self.id,
            "name": self.name,
            "interests": self.interests,
            "preferences": self.preferences,
            "feedback_count": self.feedback_count,
            "last_updated": self.last_updated.isoformat(),
        }